// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios12.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SynapPay
import Foundation
import Swift
import UIKit
@_hasMissingDesignatedInitializers public class SynapPayButton {
  public static func create(view containerView: UIKit.UIView) -> SynapPay.SynapPayButton
  public static func createPaymentBanks(view containerView: UIKit.UIView) -> SynapPay.SynapPayButton
  public func configure(authenticator: SynapPay.SynapAuthenticator, transaction: SynapPay.SynapTransaction, success: @escaping (SynapPay.SynapAuthorizeResponse) -> Swift.Void, failed: @escaping (SynapPay.SynapAuthorizeResponse) -> Swift.Void)
  public func pay()
  public func hasPrimaryCard() -> Swift.Bool
  public func payWithPrimaryCard()
  @objc deinit
}
public struct SynapDocument : Swift.Codable {
  public var type: Swift.String?
  public var number: Swift.String?
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SynapExpiration : Swift.Codable {
  public var type: Swift.String?
  public var date: Swift.String?
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SynapAutogenerate : Swift.Codable {
  public var paymentCode: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SynapCardStorage : Swift.Codable {
  public var userIdentifier: Swift.String?
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SynapMessage : Swift.Codable {
  public var code: Swift.String?
  public var text: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SynapTransaction : Swift.Codable {
  public var order: SynapPay.SynapOrder?
  public var settings: SynapPay.SynapSettings?
  public var features: SynapPay.SynapFeatures?
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class SynapDarkTheme : SynapPay.SynapTheme {
  public init()
  public init(cardBackDrop: UIKit.UIImage)
  public init(cardBackDrop: UIKit.UIImage, primaryColor: UIKit.UIColor)
  public func getName() -> Swift.String
  public func getCardBackdropImage() -> UIKit.UIImage
  public func getPrimaryColor() -> UIKit.UIColor
  public func getLogoVISAImage() -> UIKit.UIImage
  public func getLogoMSCDImage() -> UIKit.UIImage
  public func getLogoDINCImage() -> UIKit.UIImage
  public func getLogoAMEXImage() -> UIKit.UIImage
  public func getButtonDeleteImage() -> UIKit.UIImage
  public func getCardAddActiveImage() -> UIKit.UIImage
  public func getCardAddInactiveImage() -> UIKit.UIImage
  public func getCardItemActiveImage() -> UIKit.UIImage
  public func getCardItemInactiveImage() -> UIKit.UIImage
  public func getPinActiveImage() -> UIKit.UIImage
  public func getPinInactiveImage() -> UIKit.UIImage
  public func getPrimaryCardActiveImage() -> UIKit.UIImage
  public func getPrimaryCardInactiveImage() -> UIKit.UIImage
  public func getErrorColor() -> UIKit.UIColor
  @objc deinit
}
public struct SynapTax : Swift.Codable {
  public var name: Swift.String?
  public var amount: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SynapCurrency : Swift.Codable {
  public var code: Swift.String?
  public var name: Swift.String?
  public var number: Swift.String?
  public var symbol: Swift.String?
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SynapOrder : Swift.Codable {
  public var number: Swift.String?
  public var amount: Swift.String?
  public var taxAmount: Swift.String?
  public var paymentCode: Swift.String?
  public var shippingAmount: Swift.String?
  public var country: SynapPay.SynapCountry?
  public var currency: SynapPay.SynapCurrency?
  public var products: [SynapPay.SynapProduct]?
  public var customer: SynapPay.SynapPerson?
  public var billing: SynapPay.SynapPerson?
  public var shipping: SynapPay.SynapPerson?
  public var taxes: [SynapPay.SynapTax]?
  public var metadata: [SynapPay.SynapMetadata]?
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension SynapPayButton {
  public enum Environment {
    case production
    case sandbox
    case development
    case local
    public static func == (a: SynapPay.SynapPayButton.Environment, b: SynapPay.SynapPayButton.Environment) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public static func setEnvironment(_ environment: SynapPay.SynapPayButton.Environment)
}
extension SynapPayButton {
  public static func setTheme(_ theme: SynapPay.SynapTheme)
}
extension SynapPayButton {
  public enum Events {
    case startPay
    case validCardForm
    case invalidCardForm
    public static func == (a: SynapPay.SynapPayButton.Events, b: SynapPay.SynapPayButton.Events) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public static func setListener(listener: @escaping (SynapPay.SynapPayButton.Events) -> Swift.Void)
}
public struct SynapPlanQuota : Swift.Codable {
  public var plan: Swift.String?
  public var quota: Swift.String?
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SynapProduct : Swift.Codable {
  public var name: Swift.String?
  public var code: Swift.String?
  public var description: Swift.String?
  public var quantity: Swift.String?
  public var unitAmount: Swift.String?
  public var taxAmount: Swift.String?
  public var amount: Swift.String?
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SynapAuthenticator : Swift.Codable {
  public var identifier: Swift.String?
  public var signature: Swift.String?
  public var signedElement: Swift.String?
  public var onBehalf: Swift.String?
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SynapAddress : Swift.Codable {
  public var country: Swift.String?
  public var levels: [Swift.String]?
  public var line1: Swift.String?
  public var line2: Swift.String?
  public var zip: Swift.String?
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SynapPerson : Swift.Codable {
  public var name: Swift.String?
  public var lastName: Swift.String?
  public var email: Swift.String?
  public var phone: Swift.String?
  public var address: SynapPay.SynapAddress?
  public var document: SynapPay.SynapDocument?
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SynapCard : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SynapAuthorizeResponse : Swift.Codable {
  public var success: Swift.Bool?
  public var payment: SynapPay.SynapPayment?
  public var message: SynapPay.SynapMessage?
  public var result: SynapPay.SynapPaymentResult?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol SynapTheme {
  func getName() -> Swift.String
  func getCardBackdropImage() -> UIKit.UIImage
  func getPrimaryColor() -> UIKit.UIColor
  func getLogoVISAImage() -> UIKit.UIImage
  func getLogoMSCDImage() -> UIKit.UIImage
  func getLogoDINCImage() -> UIKit.UIImage
  func getLogoAMEXImage() -> UIKit.UIImage
  func getButtonDeleteImage() -> UIKit.UIImage
  func getCardAddActiveImage() -> UIKit.UIImage
  func getCardAddInactiveImage() -> UIKit.UIImage
  func getCardItemActiveImage() -> UIKit.UIImage
  func getCardItemInactiveImage() -> UIKit.UIImage
  func getPinActiveImage() -> UIKit.UIImage
  func getPinInactiveImage() -> UIKit.UIImage
  func getPrimaryCardActiveImage() -> UIKit.UIImage
  func getPrimaryCardInactiveImage() -> UIKit.UIImage
  func getErrorColor() -> UIKit.UIColor
}
public struct SynapCountry : Swift.Codable {
  public var code: Swift.String?
  public var name: Swift.String?
  public var number: Swift.String?
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SynapPaymentProcessorResult : Swift.Codable {
  public var code: Swift.String?
  public var message: Swift.String?
  public var traceIdentifier: Swift.String?
  public var originalResponse: Swift.String?
  public var paymentCode: SynapPay.SynapPaymentCode?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public class SynapLightTheme : SynapPay.SynapTheme {
  public init()
  public init(cardBackDrop: UIKit.UIImage)
  public init(cardBackDrop: UIKit.UIImage, primaryColor: UIKit.UIColor)
  public func getName() -> Swift.String
  public func getCardBackdropImage() -> UIKit.UIImage
  public func getPrimaryColor() -> UIKit.UIColor
  public func getLogoVISAImage() -> UIKit.UIImage
  public func getLogoMSCDImage() -> UIKit.UIImage
  public func getLogoDINCImage() -> UIKit.UIImage
  public func getLogoAMEXImage() -> UIKit.UIImage
  public func getButtonDeleteImage() -> UIKit.UIImage
  public func getCardAddActiveImage() -> UIKit.UIImage
  public func getCardAddInactiveImage() -> UIKit.UIImage
  public func getCardItemActiveImage() -> UIKit.UIImage
  public func getCardItemInactiveImage() -> UIKit.UIImage
  public func getPinActiveImage() -> UIKit.UIImage
  public func getPinInactiveImage() -> UIKit.UIImage
  public func getPrimaryCardActiveImage() -> UIKit.UIImage
  public func getPrimaryCardInactiveImage() -> UIKit.UIImage
  public func getErrorColor() -> UIKit.UIColor
  @objc deinit
}
public struct SynapToken : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SynapSettings : Swift.Codable {
  public var language: Swift.String?
  public var businessService: Swift.String?
  public var brands: [Swift.String]?
  public var responseType: Swift.String?
  public var autogenerate: SynapPay.SynapAutogenerate?
  public var expiration: SynapPay.SynapExpiration?
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SynapPaymentCode : Swift.Codable {
  public var processorCode: Swift.String?
  public var code: Swift.String?
  public var webReference: Swift.String?
  public var expirationDate: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SynapPaymentResult : Swift.Codable {
  public var accepted: Swift.Bool?
  public var code: Swift.String?
  public var message: Swift.String?
  public var processingTimestamp: Swift.String?
  public var processorResult: SynapPay.SynapPaymentProcessorResult?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SynapMetadata : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SynapFeatures : Swift.Codable {
  public var cardStorage: SynapPay.SynapCardStorage?
  public var planQuota: SynapPay.SynapPlanQuota?
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SynapPayment : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension SynapPay.SynapPayButton.Environment : Swift.Equatable {}
extension SynapPay.SynapPayButton.Environment : Swift.Hashable {}
extension SynapPay.SynapPayButton.Events : Swift.Equatable {}
extension SynapPay.SynapPayButton.Events : Swift.Hashable {}
